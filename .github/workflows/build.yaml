name: CI
on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
jobs:
  check-go-mod-tidy:
    name: Check `go mod tidy`
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"
      - name: Run `go mod tidy` and verify no changes
        run: |
          go mod tidy
          if [ -n "$(git status --porcelain)" ]
          then
              git status --short; \
              echo; \
              echo "Did you remember to run `go mod tidy`? Run `go mod tidy` and commit the result."; \
              exit 1; \
          fi
  check-go-generate:
    name: Check `go generate`
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"
      - name: Install tools
        run: |
          go install golang.org/x/tools/cmd/stringer@latest
          go install github.com/deepmap/oapi-codegen/cmd/oapi-codegen@v1.15.0
      - name: Run `go generate ./...` and verify no changes
        run: |
          go generate ./...
          if [ -n "$(git status --porcelain)" ]
          then
              git status --short; \
              echo; \
              echo "Did you remember to run `go generate ./...`? Run `go generate ./...` and commit the result."; \
              exit 1; \
          fi
  build:
    name: Build Shortener
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"
      - name: Build Shortener service
        run: |
          go build ./cmd/shortener
  test:
    name: Run the unit tests
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v3
      - name: Set go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"
      - name: Run the unit tests
        run: |
          go test -covermode=count -coverprofile=coverage.info ./...
  build-and-push-image:
    name: Build and push container image
    runs-on: ubuntu-latest
    needs:
      - build
      - test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ./kubernetes/Dockerfile
